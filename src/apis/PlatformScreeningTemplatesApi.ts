/* tslint:disable */
/* eslint-disable */
/**
 * Screening AI API Docs
 * API Documentation for Screening AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseWrapper,
  CreateScreeningTemplateDto,
  GenerateScreeningTemplateQuestionsDto,
} from '../models/index';
import {
    ApiResponseWrapperFromJSON,
    ApiResponseWrapperToJSON,
    CreateScreeningTemplateDtoFromJSON,
    CreateScreeningTemplateDtoToJSON,
    GenerateScreeningTemplateQuestionsDtoFromJSON,
    GenerateScreeningTemplateQuestionsDtoToJSON,
} from '../models/index';

export interface PlatformScreeningTemplatesControllerCreateScreeningTemplateRequest {
    createScreeningTemplateDto: CreateScreeningTemplateDto;
}

export interface PlatformScreeningTemplatesControllerGenerateScreeningTemplateQuestionsRequest {
    generateScreeningTemplateQuestionsDto: GenerateScreeningTemplateQuestionsDto;
}

/**
 * 
 */
export class PlatformScreeningTemplatesApi extends runtime.BaseAPI {

    /**
     * Create a new Screening Template
     */
    async platformScreeningTemplatesControllerCreateScreeningTemplateRaw(requestParameters: PlatformScreeningTemplatesControllerCreateScreeningTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['createScreeningTemplateDto'] == null) {
            throw new runtime.RequiredError(
                'createScreeningTemplateDto',
                'Required parameter "createScreeningTemplateDto" was null or undefined when calling platformScreeningTemplatesControllerCreateScreeningTemplate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-template`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScreeningTemplateDtoToJSON(requestParameters['createScreeningTemplateDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Create a new Screening Template
     */
    async platformScreeningTemplatesControllerCreateScreeningTemplate(requestParameters: PlatformScreeningTemplatesControllerCreateScreeningTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningTemplatesControllerCreateScreeningTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate Screening Template Questions
     */
    async platformScreeningTemplatesControllerGenerateScreeningTemplateQuestionsRaw(requestParameters: PlatformScreeningTemplatesControllerGenerateScreeningTemplateQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['generateScreeningTemplateQuestionsDto'] == null) {
            throw new runtime.RequiredError(
                'generateScreeningTemplateQuestionsDto',
                'Required parameter "generateScreeningTemplateQuestionsDto" was null or undefined when calling platformScreeningTemplatesControllerGenerateScreeningTemplateQuestions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-template/generateQuestions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GenerateScreeningTemplateQuestionsDtoToJSON(requestParameters['generateScreeningTemplateQuestionsDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Generate Screening Template Questions
     */
    async platformScreeningTemplatesControllerGenerateScreeningTemplateQuestions(requestParameters: PlatformScreeningTemplatesControllerGenerateScreeningTemplateQuestionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningTemplatesControllerGenerateScreeningTemplateQuestionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all Screening Templates of Organisation
     */
    async platformScreeningTemplatesControllerGetScreeningTemplatesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-template`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get all Screening Templates of Organisation
     */
    async platformScreeningTemplatesControllerGetScreeningTemplates(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningTemplatesControllerGetScreeningTemplatesRaw(initOverrides);
        return await response.value();
    }

}
