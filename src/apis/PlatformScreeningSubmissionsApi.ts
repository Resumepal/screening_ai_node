/* tslint:disable */
/* eslint-disable */
/**
 * Screening AI API Docs
 * API Documentation for Screening AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiResponseWrapper,
  CreatePlatformScreeningFormSubmissionDto,
  CreatePlatformScreeningSubmissionStreamingRoomTokenDto,
  GetPlatformScreeningSubmissionsOfOrgDto,
  UpdatePlatformScreeningSubmissionChatDto,
  UpdatePlatformScreeningSubmissionsStatusDto,
} from '../models/index';
import {
    ApiResponseWrapperFromJSON,
    ApiResponseWrapperToJSON,
    CreatePlatformScreeningFormSubmissionDtoFromJSON,
    CreatePlatformScreeningFormSubmissionDtoToJSON,
    CreatePlatformScreeningSubmissionStreamingRoomTokenDtoFromJSON,
    CreatePlatformScreeningSubmissionStreamingRoomTokenDtoToJSON,
    GetPlatformScreeningSubmissionsOfOrgDtoFromJSON,
    GetPlatformScreeningSubmissionsOfOrgDtoToJSON,
    UpdatePlatformScreeningSubmissionChatDtoFromJSON,
    UpdatePlatformScreeningSubmissionChatDtoToJSON,
    UpdatePlatformScreeningSubmissionsStatusDtoFromJSON,
    UpdatePlatformScreeningSubmissionsStatusDtoToJSON,
} from '../models/index';

export interface PlatformScreeningSubmissionsControllerConvertAudioToTextRequest {
    orgId: string;
    screeningSubmissionId: string;
    index: number;
    file: Blob;
    fileType: string;
}

export interface PlatformScreeningSubmissionsControllerCreateScreeningStreamRoomRequest {
    createPlatformScreeningSubmissionStreamingRoomTokenDto: CreatePlatformScreeningSubmissionStreamingRoomTokenDto;
}

export interface PlatformScreeningSubmissionsControllerCreateScreeningSubmissionRequest {
    createPlatformScreeningFormSubmissionDto: CreatePlatformScreeningFormSubmissionDto;
}

export interface PlatformScreeningSubmissionsControllerGetScreeningSubmissionUsingIdRequest {
    screeningSubmissionId: string;
}

export interface PlatformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrgRequest {
    getPlatformScreeningSubmissionsOfOrgDto: GetPlatformScreeningSubmissionsOfOrgDto;
}

export interface PlatformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhoneRequest {
    email: string;
    phone: string;
    orgAlias: string;
    jobId: string;
}

export interface PlatformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobIdRequest {
    jobId: string;
}

export interface PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionChatRequest {
    updatePlatformScreeningSubmissionChatDto: UpdatePlatformScreeningSubmissionChatDto;
}

export interface PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionStatusRequest {
    updatePlatformScreeningSubmissionsStatusDto: UpdatePlatformScreeningSubmissionsStatusDto;
}

export interface PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatusRequest {
    screeningSubmissionId: string;
}

/**
 * 
 */
export class PlatformScreeningSubmissionsApi extends runtime.BaseAPI {

    /**
     * Convert Audio to Text
     */
    async platformScreeningSubmissionsControllerConvertAudioToTextRaw(requestParameters: PlatformScreeningSubmissionsControllerConvertAudioToTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['orgId'] == null) {
            throw new runtime.RequiredError(
                'orgId',
                'Required parameter "orgId" was null or undefined when calling platformScreeningSubmissionsControllerConvertAudioToText().'
            );
        }

        if (requestParameters['screeningSubmissionId'] == null) {
            throw new runtime.RequiredError(
                'screeningSubmissionId',
                'Required parameter "screeningSubmissionId" was null or undefined when calling platformScreeningSubmissionsControllerConvertAudioToText().'
            );
        }

        if (requestParameters['index'] == null) {
            throw new runtime.RequiredError(
                'index',
                'Required parameter "index" was null or undefined when calling platformScreeningSubmissionsControllerConvertAudioToText().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling platformScreeningSubmissionsControllerConvertAudioToText().'
            );
        }

        if (requestParameters['fileType'] == null) {
            throw new runtime.RequiredError(
                'fileType',
                'Required parameter "fileType" was null or undefined when calling platformScreeningSubmissionsControllerConvertAudioToText().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['orgId'] != null) {
            formParams.append('orgId', requestParameters['orgId'] as any);
        }

        if (requestParameters['screeningSubmissionId'] != null) {
            formParams.append('screeningSubmissionId', requestParameters['screeningSubmissionId'] as any);
        }

        if (requestParameters['index'] != null) {
            formParams.append('index', requestParameters['index'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileType'] != null) {
            formParams.append('fileType', requestParameters['fileType'] as any);
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/textFromAudio`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Convert Audio to Text
     */
    async platformScreeningSubmissionsControllerConvertAudioToText(requestParameters: PlatformScreeningSubmissionsControllerConvertAudioToTextRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerConvertAudioToTextRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Screening Submission Streaming Room
     */
    async platformScreeningSubmissionsControllerCreateScreeningStreamRoomRaw(requestParameters: PlatformScreeningSubmissionsControllerCreateScreeningStreamRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['createPlatformScreeningSubmissionStreamingRoomTokenDto'] == null) {
            throw new runtime.RequiredError(
                'createPlatformScreeningSubmissionStreamingRoomTokenDto',
                'Required parameter "createPlatformScreeningSubmissionStreamingRoomTokenDto" was null or undefined when calling platformScreeningSubmissionsControllerCreateScreeningStreamRoom().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/stream/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlatformScreeningSubmissionStreamingRoomTokenDtoToJSON(requestParameters['createPlatformScreeningSubmissionStreamingRoomTokenDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Create Screening Submission Streaming Room
     */
    async platformScreeningSubmissionsControllerCreateScreeningStreamRoom(requestParameters: PlatformScreeningSubmissionsControllerCreateScreeningStreamRoomRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerCreateScreeningStreamRoomRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new Screening Submission
     */
    async platformScreeningSubmissionsControllerCreateScreeningSubmissionRaw(requestParameters: PlatformScreeningSubmissionsControllerCreateScreeningSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['createPlatformScreeningFormSubmissionDto'] == null) {
            throw new runtime.RequiredError(
                'createPlatformScreeningFormSubmissionDto',
                'Required parameter "createPlatformScreeningFormSubmissionDto" was null or undefined when calling platformScreeningSubmissionsControllerCreateScreeningSubmission().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePlatformScreeningFormSubmissionDtoToJSON(requestParameters['createPlatformScreeningFormSubmissionDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Create a new Screening Submission
     */
    async platformScreeningSubmissionsControllerCreateScreeningSubmission(requestParameters: PlatformScreeningSubmissionsControllerCreateScreeningSubmissionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerCreateScreeningSubmissionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Screening Submission using ID
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionUsingIdRaw(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionUsingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['screeningSubmissionId'] == null) {
            throw new runtime.RequiredError(
                'screeningSubmissionId',
                'Required parameter "screeningSubmissionId" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionUsingId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['screeningSubmissionId'] != null) {
            queryParameters['screeningSubmissionId'] = requestParameters['screeningSubmissionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get Screening Submission using ID
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionUsingId(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionUsingIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerGetScreeningSubmissionUsingIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Screening Submissions of an Organisation
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrgRaw(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['getPlatformScreeningSubmissionsOfOrgDto'] == null) {
            throw new runtime.RequiredError(
                'getPlatformScreeningSubmissionsOfOrgDto',
                'Required parameter "getPlatformScreeningSubmissionsOfOrgDto" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrg().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/org/filters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPlatformScreeningSubmissionsOfOrgDtoToJSON(requestParameters['getPlatformScreeningSubmissionsOfOrgDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get Screening Submissions of an Organisation
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrg(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrgRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerGetScreeningSubmissionsOfOrgRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Screening Submission using Email ir Phone
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhoneRaw(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhone().'
            );
        }

        if (requestParameters['phone'] == null) {
            throw new runtime.RequiredError(
                'phone',
                'Required parameter "phone" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhone().'
            );
        }

        if (requestParameters['orgAlias'] == null) {
            throw new runtime.RequiredError(
                'orgAlias',
                'Required parameter "orgAlias" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhone().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhone().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['phone'] != null) {
            queryParameters['phone'] = requestParameters['phone'];
        }

        if (requestParameters['orgAlias'] != null) {
            queryParameters['orgAlias'] = requestParameters['orgAlias'];
        }

        if (requestParameters['jobId'] != null) {
            queryParameters['jobId'] = requestParameters['jobId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/email-phone`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get Screening Submission using Email ir Phone
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhone(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhoneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingEmailPhoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Screening Submissions using Job ID
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobIdRaw(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobId().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['jobId'] != null) {
            queryParameters['jobId'] = requestParameters['jobId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/jobId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Get Screening Submissions using Job ID
     */
    async platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobId(requestParameters: PlatformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerGetScreeningSubmissionsUsingJobIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Screening Submission Chat Objects
     */
    async platformScreeningSubmissionsControllerUpdateScreeningSubmissionChatRaw(requestParameters: PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['updatePlatformScreeningSubmissionChatDto'] == null) {
            throw new runtime.RequiredError(
                'updatePlatformScreeningSubmissionChatDto',
                'Required parameter "updatePlatformScreeningSubmissionChatDto" was null or undefined when calling platformScreeningSubmissionsControllerUpdateScreeningSubmissionChat().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlatformScreeningSubmissionChatDtoToJSON(requestParameters['updatePlatformScreeningSubmissionChatDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Update Screening Submission Chat Objects
     */
    async platformScreeningSubmissionsControllerUpdateScreeningSubmissionChat(requestParameters: PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerUpdateScreeningSubmissionChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Screening Submission Status
     */
    async platformScreeningSubmissionsControllerUpdateScreeningSubmissionStatusRaw(requestParameters: PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['updatePlatformScreeningSubmissionsStatusDto'] == null) {
            throw new runtime.RequiredError(
                'updatePlatformScreeningSubmissionsStatusDto',
                'Required parameter "updatePlatformScreeningSubmissionsStatusDto" was null or undefined when calling platformScreeningSubmissionsControllerUpdateScreeningSubmissionStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/status`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePlatformScreeningSubmissionsStatusDtoToJSON(requestParameters['updatePlatformScreeningSubmissionsStatusDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Update Screening Submission Status
     */
    async platformScreeningSubmissionsControllerUpdateScreeningSubmissionStatus(requestParameters: PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerUpdateScreeningSubmissionStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Screening Submission View Status
     */
    async platformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatusRaw(requestParameters: PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiResponseWrapper>> {
        if (requestParameters['screeningSubmissionId'] == null) {
            throw new runtime.RequiredError(
                'screeningSubmissionId',
                'Required parameter "screeningSubmissionId" was null or undefined when calling platformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatus().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['screeningSubmissionId'] != null) {
            queryParameters['screeningSubmissionId'] = requestParameters['screeningSubmissionId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // X-API-KEY authentication
        }

        const response = await this.request({
            path: `/api/v2/platform/platform-screening-submission/view`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiResponseWrapperFromJSON(jsonValue));
    }

    /**
     * Update Screening Submission View Status
     */
    async platformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatus(requestParameters: PlatformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiResponseWrapper> {
        const response = await this.platformScreeningSubmissionsControllerUpdateScreeningSubmissionViewStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
