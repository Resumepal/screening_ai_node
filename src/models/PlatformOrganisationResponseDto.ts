/* tslint:disable */
/* eslint-disable */
/**
 * Screening AI API Docs
 * API Documentation for Screening AI
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PlatformOrganisationResponseDto
 */
export interface PlatformOrganisationResponseDto {
    /**
     * Organisation ID
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgId: string;
    /**
     * Organisation name
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgName: string;
    /**
     * Organisation alias
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgAlias: string;
    /**
     * Organisation Dp Url
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgDpUrl: string;
    /**
     * Organisation Super Admin Id
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgSuperAdmin: string;
    /**
     * Organisation Admins
     * @type {Array<string>}
     * @memberof PlatformOrganisationResponseDto
     */
    orgAdmins: Array<string>;
    /**
     * Organisation Joining Date
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgJoinedAt: string;
    /**
     * Organisation Country
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgCountry: string;
    /**
     * Organisation City
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgCity: string;
    /**
     * Organisation State
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    orgState: string;
    /**
     * Organisation Active Status
     * @type {boolean}
     * @memberof PlatformOrganisationResponseDto
     */
    orgActive: boolean;
    /**
     * Creation date in ISO Date Time String
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    createdAt: string;
    /**
     * Last Updated date in ISO Date Time String
     * @type {string}
     * @memberof PlatformOrganisationResponseDto
     */
    updatedAt: string;
}

/**
 * Check if a given object implements the PlatformOrganisationResponseDto interface.
 */
export function instanceOfPlatformOrganisationResponseDto(value: object): value is PlatformOrganisationResponseDto {
    if (!('orgId' in value) || value['orgId'] === undefined) return false;
    if (!('orgName' in value) || value['orgName'] === undefined) return false;
    if (!('orgAlias' in value) || value['orgAlias'] === undefined) return false;
    if (!('orgDpUrl' in value) || value['orgDpUrl'] === undefined) return false;
    if (!('orgSuperAdmin' in value) || value['orgSuperAdmin'] === undefined) return false;
    if (!('orgAdmins' in value) || value['orgAdmins'] === undefined) return false;
    if (!('orgJoinedAt' in value) || value['orgJoinedAt'] === undefined) return false;
    if (!('orgCountry' in value) || value['orgCountry'] === undefined) return false;
    if (!('orgCity' in value) || value['orgCity'] === undefined) return false;
    if (!('orgState' in value) || value['orgState'] === undefined) return false;
    if (!('orgActive' in value) || value['orgActive'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PlatformOrganisationResponseDtoFromJSON(json: any): PlatformOrganisationResponseDto {
    return PlatformOrganisationResponseDtoFromJSONTyped(json, false);
}

export function PlatformOrganisationResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlatformOrganisationResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'orgId': json['orgId'],
        'orgName': json['orgName'],
        'orgAlias': json['orgAlias'],
        'orgDpUrl': json['orgDpUrl'],
        'orgSuperAdmin': json['orgSuperAdmin'],
        'orgAdmins': json['orgAdmins'],
        'orgJoinedAt': json['orgJoinedAt'],
        'orgCountry': json['orgCountry'],
        'orgCity': json['orgCity'],
        'orgState': json['orgState'],
        'orgActive': json['orgActive'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
    };
}

export function PlatformOrganisationResponseDtoToJSON(json: any): PlatformOrganisationResponseDto {
    return PlatformOrganisationResponseDtoToJSONTyped(json, false);
}

export function PlatformOrganisationResponseDtoToJSONTyped(value?: PlatformOrganisationResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'orgId': value['orgId'],
        'orgName': value['orgName'],
        'orgAlias': value['orgAlias'],
        'orgDpUrl': value['orgDpUrl'],
        'orgSuperAdmin': value['orgSuperAdmin'],
        'orgAdmins': value['orgAdmins'],
        'orgJoinedAt': value['orgJoinedAt'],
        'orgCountry': value['orgCountry'],
        'orgCity': value['orgCity'],
        'orgState': value['orgState'],
        'orgActive': value['orgActive'],
        'createdAt': value['createdAt'],
        'updatedAt': value['updatedAt'],
    };
}

